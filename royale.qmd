# Isle Royale Wolf and Moose

```{python}
#| eval: false
pip install --quiet ~/Documents/GitHub/landmapy
```

```{python}
from landmapy.initial import robust_code

robust_code()
```

```{python}
from landmapy.reflect import read_delta_gdf
from landmapy.plot import plot_delta_gdf
```

```{python}
# Isle Royale: '041800000101'
# Lake Mendota: '070900020604'
# Lake Monona: '070900020702'
# Mississippi Delta: '080902030506'
royale_gdf = read_delta_gdf(huc_region='04', watershed='041800000101',
    dissolve=False, func_key='wbd_04', override=False)
plot_delta_gdf(royale_gdf)
```

```{python}
poly = royale_gdf['geometry']
print(poly)
y = poly.apply(lambda geom: len(geom.geoms) if geom.geom_type == 'MultiPolygon' else 1)
print(y)
x = poly.apply(lambda geom: geom.geoms if geom.geom_type == 'MultiPolygon' else 1)
len(x)
print(x)
```

```{python}
first_multi_polygon = poly.iloc[0]

# Iterate over the GeometrySequence to access individual polygons
for idx, polygon in enumerate(first_multi_polygon.geoms):
    print(f'Polygon {idx}: {polygon}')
    print(polygon)
    break
```

```{python}
for idx, polygon in enumerate(first_multi_polygon.geoms):
    print(f'Polygon {idx}:')
    print(f'  Type: {polygon.geom_type}')
    print(f'  Coordinates: {list(polygon.exterior.coords)}')
    print(f'  Area: {polygon.area}')
    break
```

Plot Isle Royale (the first polygon)

```{python}
import matplotlib.pyplot as plt

poly = royale_gdf['geometry']
first_multi_polygon = poly.iloc[0]

# Extract the first polygon
first_polygon = first_multi_polygon.geoms[0]

# Plot the polygon
fig, ax = plt.subplots()
x, y = first_polygon.exterior.xy
ax.plot(x, y, color='blue')

ax.set_title('First Polygon from MultiPolygon')
ax.set_xlabel('Longitude')
ax.set_ylabel('Latitude')
plt.show()
```

Extract first polygon as its own GDF.

```{python}
import geopandas as gpd

# Function to extract the first polygon from a MultiPolygon
def extract_first_polygon(geometry):
    if geometry.geom_type == 'MultiPolygon':
        return geometry.geoms[0]
    return geometry

# Apply the function to the geometry column
gdf = royale_gdf
gdf['geometry'] = gdf['geometry'].apply(extract_first_polygon)

# Create a new GeoDataFrame with the extracted polygons
new_gdf = gpd.GeoDataFrame(gdf, geometry='geometry')

# Save or use the new GeoDataFrame
#new_gdf.to_file('path_to_new_file.shp')

new_gdf
```

```{python}
plot_delta_gdf(new_gdf)
```

```{python}
new_gdf.bounds
```

## Python geohexgrid package

```{python}
#| eval: false
pip install geohexgrid
```

Example Code
Here's an example of how to create a hexagonal grid that covers a GeoDataFrame:


```{python}
import geopandas as gpd
import geohexgrid as ghg
import matplotlib.pyplot as plt

gdf = new_gdf

# Create a hexagonal grid with a specified circumradius (e.g., 1 kilometers)
hex_grid = ghg.make_grid_from_gdf(gdf, R=0.01)

# Plot the GeoDataFrame and the hexagonal grid
fig, ax = plt.subplots()
hex_grid.plot(ax=ax, color='none', edgecolor='blue')
gdf.plot(ax=ax, color='none', edgecolor='black')

ax.set_title('Isle Royale with Hexagon Overlay')
plt.savefig("isle_royale.png")
plt.show()
```

## Python h3 package

This does not work yet.
It seems the `polyfill()` may not be in `h3` any more.

```{python}
#| eval: false
pip install h3
```

```{python}
import h3
from shapely.geometry import Polygon, Point

# Define your geometry (example: a simple square polygon)
geometry = Polygon([(0, 0), (0, 1), (1, 1), (1, 0)])

# Define the resolution of the hexagons
resolution = 9

# Get the bounding box of the geometry
minx, miny, maxx, maxy = geometry.bounds

# Iterate over the bounding box and generate hexagons
hexagons = set()
for lat in range(int(miny * 1e6), int(maxy * 1e6), 10000):
    for lng in range(int(minx * 1e6), int(maxx * 1e6), 10000):
        hex_id = h3.latlng_to_cell(lat / 1e6, lng / 1e6, resolution)
        hex_center = h3.cell_to_latlng(hex_id)
        if geometry.contains(Point(hex_center[1], hex_center[0])):
            hexagons.add(hex_id)

# Print the hexagons
print(hexagons)
```

```{python}
import h3
import geopandas as gpd
from shapely.geometry import Point

gdf = new_gdf

# Define the resolution of the hexagons
resolution = 9

# Iterate over the bounding box of the geometry and generate hexagons
hexagons = set()
for geometry in gdf.geometry:
    print(geometry.bounds)
    minx, miny, maxx, maxy = geometry.bounds
    lat = miny
    while lat <= maxy:
        lng = minx
        while lng <= maxx:
            hex_id = h3.latlng_to_cell(lat, lng, resolution)
            hex_center = h3.cell_to_latlng(hex_id)
            if geometry.contains(Point(hex_center[1], hex_center[0])):
                hexagons.add(hex_id)
            lng += 0.1
        lat += 0.1

# Print the hexagons
print(hexagons)
```

```{python}
# Create a GeoDataFrame for the hexagons
hex_geometries = [Polygon(h3.cell_to_boundary(h)) for h in hexagons]
hex_gdf = gpd.GeoDataFrame({'geometry': hex_geometries}, crs="EPSG:4269")

# Plot the GeoDataFrame and the hexagons
fig, ax = plt.subplots(figsize=(100,5))
gdf.boundary.plot(ax=ax, color='blue')
hex_gdf.boundary.plot(ax=ax, color='red')
plt.show()
```

```{python}
hex_gdf.plot()
```

`h3.polyfill()` not found

```{python}
#| eval: false
import geopandas as gpd
import h3
import matplotlib.pyplot as plt
from shapely.geometry import Polygon, mapping

# Load your GeoDataFrame (replace with your actual file path)
gdf = new_gdf

# Function to convert H3 hexagons to Shapely polygons
def h3_to_polygon(h3_index):
    boundary = h3.h3_to_geo_boundary(h3_index)
    return Polygon([(lon, lat) for lat, lon in boundary])

# Create a hexagonal grid with a resolution that approximates a 10 km radius
resolution = 6  # Adjust resolution as needed
hexagons = set()

# Iterate over the GeoDataFrame and generate hexagons
for geom in gdf.geometry:
    if geom.is_empty:
        continue
    # Convert the geometry to GeoJSON
    geojson_geom = mapping(geom)
    # Generate hexagons within the geometry
    hexagons.update(h3.polyfill(geojson_geom, resolution))

# Convert hexagons to Shapely polygons
hex_polygons = [h3_to_polygon(h) for h in hexagons]

# Create a GeoDataFrame for the hexagons
hex_gdf = gpd.GeoDataFrame(geometry=hex_polygons)

# Plot the GeoDataFrame and the hexagonal grid
fig, ax = plt.subplots()
gdf.plot(ax=ax, color='lightgrey', edgecolor='black')  # Plot the GeoDataFrame
hex_gdf.plot(ax=ax, color='none', edgecolor='blue')   # Overlay the hexagonal grid

ax.set_title('Hexagonal Grid Overlay')
plt.show()
```
